pub use bountyscape_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod bountyscape_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "BountyscapeTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static BOUNTYSCAPETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testAnyoneCanListBounties\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testAnyoneCanListBountiesAndGetStatus\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCanClaimBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCanClaimFunds\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCanClaimFundsEmpolyerCanBurnMultiple\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCanClaimFundsMultiple\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCompleteBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testEmployerCanApproveCompletedBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testEmployerCanCreateBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testEmployerCanCreatePrivateBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailContractorCanClaimFundsNOCLAIM\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailEmployerCanClaimBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailEmployerCanCreateBountyNOVALUE\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailEmployerCanCreatePrivateBountyNOVALUE\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static BOUNTYSCAPETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "" . parse () . expect ("invalid bytecode")
        });
    pub struct BountyscapeTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for BountyscapeTest<M> {
        fn clone(&self) -> Self {
            BountyscapeTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for BountyscapeTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for BountyscapeTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(BountyscapeTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> BountyscapeTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), BOUNTYSCAPETEST_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                BOUNTYSCAPETEST_ABI.clone(),
                BOUNTYSCAPETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testAnyoneCanListBounties` (0x336f28f6) function"]
        pub fn test_anyone_can_list_bounties(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([51, 111, 40, 246], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testAnyoneCanListBountiesAndGetStatus` (0x19692851) function"]
        pub fn test_anyone_can_list_bounties_and_get_status(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([25, 105, 40, 81], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCanClaimBounty` (0x1d2dba6b) function"]
        pub fn test_contractor_can_claim_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([29, 45, 186, 107], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCanClaimFunds` (0xf2874bc7) function"]
        pub fn test_contractor_can_claim_funds(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 135, 75, 199], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCanClaimFundsEmpolyerCanBurnMultiple` (0xd7278ee9) function"]
        pub fn test_contractor_can_claim_funds_empolyer_can_burn_multiple(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([215, 39, 142, 233], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCanClaimFundsMultiple` (0x524b4463) function"]
        pub fn test_contractor_can_claim_funds_multiple(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([82, 75, 68, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCompleteBounty` (0x39a375ef) function"]
        pub fn test_contractor_complete_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([57, 163, 117, 239], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testEmployerCanApproveCompletedBounty` (0x908157b6) function"]
        pub fn test_employer_can_approve_completed_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([144, 129, 87, 182], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testEmployerCanCreateBounty` (0x2b0ebe9f) function"]
        pub fn test_employer_can_create_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([43, 14, 190, 159], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testEmployerCanCreatePrivateBounty` (0x1c617b13) function"]
        pub fn test_employer_can_create_private_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([28, 97, 123, 19], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailContractorCanClaimFundsNOCLAIM` (0x82ca165f) function"]
        pub fn test_fail_contractor_can_claim_funds_noclaim(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([130, 202, 22, 95], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailEmployerCanClaimBounty` (0x5698e22a) function"]
        pub fn test_fail_employer_can_claim_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([86, 152, 226, 42], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailEmployerCanCreateBountyNOVALUE` (0x40913fb9) function"]
        pub fn test_fail_employer_can_create_bounty_novalue(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([64, 145, 63, 185], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailEmployerCanCreatePrivateBountyNOVALUE` (0x5734e614) function"]
        pub fn test_fail_employer_can_create_private_bounty_novalue(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([87, 52, 230, 20], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, BountyscapeTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for BountyscapeTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum BountyscapeTestEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for BountyscapeTestEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for BountyscapeTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BountyscapeTestEvents::LogFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogAddressFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogArray1Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogArray2Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogArray3Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogBytesFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogBytes32Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogIntFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedArray3Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogStringFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogUintFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testAnyoneCanListBounties` function with signature `testAnyoneCanListBounties()` and selector `[51, 111, 40, 246]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testAnyoneCanListBounties",
        abi = "testAnyoneCanListBounties()"
    )]
    pub struct TestAnyoneCanListBountiesCall;
    #[doc = "Container type for all input parameters for the `testAnyoneCanListBountiesAndGetStatus` function with signature `testAnyoneCanListBountiesAndGetStatus()` and selector `[25, 105, 40, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testAnyoneCanListBountiesAndGetStatus",
        abi = "testAnyoneCanListBountiesAndGetStatus()"
    )]
    pub struct TestAnyoneCanListBountiesAndGetStatusCall;
    #[doc = "Container type for all input parameters for the `testContractorCanClaimBounty` function with signature `testContractorCanClaimBounty()` and selector `[29, 45, 186, 107]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCanClaimBounty",
        abi = "testContractorCanClaimBounty()"
    )]
    pub struct TestContractorCanClaimBountyCall;
    #[doc = "Container type for all input parameters for the `testContractorCanClaimFunds` function with signature `testContractorCanClaimFunds()` and selector `[242, 135, 75, 199]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCanClaimFunds",
        abi = "testContractorCanClaimFunds()"
    )]
    pub struct TestContractorCanClaimFundsCall;
    #[doc = "Container type for all input parameters for the `testContractorCanClaimFundsEmpolyerCanBurnMultiple` function with signature `testContractorCanClaimFundsEmpolyerCanBurnMultiple()` and selector `[215, 39, 142, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCanClaimFundsEmpolyerCanBurnMultiple",
        abi = "testContractorCanClaimFundsEmpolyerCanBurnMultiple()"
    )]
    pub struct TestContractorCanClaimFundsEmpolyerCanBurnMultipleCall;
    #[doc = "Container type for all input parameters for the `testContractorCanClaimFundsMultiple` function with signature `testContractorCanClaimFundsMultiple()` and selector `[82, 75, 68, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCanClaimFundsMultiple",
        abi = "testContractorCanClaimFundsMultiple()"
    )]
    pub struct TestContractorCanClaimFundsMultipleCall;
    #[doc = "Container type for all input parameters for the `testContractorCompleteBounty` function with signature `testContractorCompleteBounty()` and selector `[57, 163, 117, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCompleteBounty",
        abi = "testContractorCompleteBounty()"
    )]
    pub struct TestContractorCompleteBountyCall;
    #[doc = "Container type for all input parameters for the `testEmployerCanApproveCompletedBounty` function with signature `testEmployerCanApproveCompletedBounty()` and selector `[144, 129, 87, 182]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testEmployerCanApproveCompletedBounty",
        abi = "testEmployerCanApproveCompletedBounty()"
    )]
    pub struct TestEmployerCanApproveCompletedBountyCall;
    #[doc = "Container type for all input parameters for the `testEmployerCanCreateBounty` function with signature `testEmployerCanCreateBounty()` and selector `[43, 14, 190, 159]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testEmployerCanCreateBounty",
        abi = "testEmployerCanCreateBounty()"
    )]
    pub struct TestEmployerCanCreateBountyCall;
    #[doc = "Container type for all input parameters for the `testEmployerCanCreatePrivateBounty` function with signature `testEmployerCanCreatePrivateBounty()` and selector `[28, 97, 123, 19]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testEmployerCanCreatePrivateBounty",
        abi = "testEmployerCanCreatePrivateBounty()"
    )]
    pub struct TestEmployerCanCreatePrivateBountyCall;
    #[doc = "Container type for all input parameters for the `testFailContractorCanClaimFundsNOCLAIM` function with signature `testFailContractorCanClaimFundsNOCLAIM()` and selector `[130, 202, 22, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFailContractorCanClaimFundsNOCLAIM",
        abi = "testFailContractorCanClaimFundsNOCLAIM()"
    )]
    pub struct TestFailContractorCanClaimFundsNOCLAIMCall;
    #[doc = "Container type for all input parameters for the `testFailEmployerCanClaimBounty` function with signature `testFailEmployerCanClaimBounty()` and selector `[86, 152, 226, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFailEmployerCanClaimBounty",
        abi = "testFailEmployerCanClaimBounty()"
    )]
    pub struct TestFailEmployerCanClaimBountyCall;
    #[doc = "Container type for all input parameters for the `testFailEmployerCanCreateBountyNOVALUE` function with signature `testFailEmployerCanCreateBountyNOVALUE()` and selector `[64, 145, 63, 185]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFailEmployerCanCreateBountyNOVALUE",
        abi = "testFailEmployerCanCreateBountyNOVALUE()"
    )]
    pub struct TestFailEmployerCanCreateBountyNOVALUECall;
    #[doc = "Container type for all input parameters for the `testFailEmployerCanCreatePrivateBountyNOVALUE` function with signature `testFailEmployerCanCreatePrivateBountyNOVALUE()` and selector `[87, 52, 230, 20]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFailEmployerCanCreatePrivateBountyNOVALUE",
        abi = "testFailEmployerCanCreatePrivateBountyNOVALUE()"
    )]
    pub struct TestFailEmployerCanCreatePrivateBountyNOVALUECall;
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum BountyscapeTestCalls {
        IsScript(IsScriptCall),
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestAnyoneCanListBounties(TestAnyoneCanListBountiesCall),
        TestAnyoneCanListBountiesAndGetStatus(TestAnyoneCanListBountiesAndGetStatusCall),
        TestContractorCanClaimBounty(TestContractorCanClaimBountyCall),
        TestContractorCanClaimFunds(TestContractorCanClaimFundsCall),
        TestContractorCanClaimFundsEmpolyerCanBurnMultiple(
            TestContractorCanClaimFundsEmpolyerCanBurnMultipleCall,
        ),
        TestContractorCanClaimFundsMultiple(TestContractorCanClaimFundsMultipleCall),
        TestContractorCompleteBounty(TestContractorCompleteBountyCall),
        TestEmployerCanApproveCompletedBounty(TestEmployerCanApproveCompletedBountyCall),
        TestEmployerCanCreateBounty(TestEmployerCanCreateBountyCall),
        TestEmployerCanCreatePrivateBounty(TestEmployerCanCreatePrivateBountyCall),
        TestFailContractorCanClaimFundsNOCLAIM(TestFailContractorCanClaimFundsNOCLAIMCall),
        TestFailEmployerCanClaimBounty(TestFailEmployerCanClaimBountyCall),
        TestFailEmployerCanCreateBountyNOVALUE(TestFailEmployerCanCreateBountyNOVALUECall),
        TestFailEmployerCanCreatePrivateBountyNOVALUE(
            TestFailEmployerCanCreatePrivateBountyNOVALUECall,
        ),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for BountyscapeTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BountyscapeTestCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BountyscapeTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BountyscapeTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BountyscapeTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestAnyoneCanListBountiesCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestAnyoneCanListBounties(decoded));
            }
            if let Ok(decoded) =
                <TestAnyoneCanListBountiesAndGetStatusCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestAnyoneCanListBountiesAndGetStatus(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestContractorCanClaimBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestContractorCanClaimBounty(decoded));
            }
            if let Ok(decoded) =
                <TestContractorCanClaimFundsCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestContractorCanClaimFunds(decoded));
            }
            if let Ok (decoded) = < TestContractorCanClaimFundsEmpolyerCanBurnMultipleCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (BountyscapeTestCalls :: TestContractorCanClaimFundsEmpolyerCanBurnMultiple (decoded)) }
            if let Ok(decoded) =
                <TestContractorCanClaimFundsMultipleCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestContractorCanClaimFundsMultiple(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestContractorCompleteBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestContractorCompleteBounty(decoded));
            }
            if let Ok(decoded) =
                <TestEmployerCanApproveCompletedBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestEmployerCanApproveCompletedBounty(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestEmployerCanCreateBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestEmployerCanCreateBounty(decoded));
            }
            if let Ok(decoded) =
                <TestEmployerCanCreatePrivateBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestEmployerCanCreatePrivateBounty(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestFailContractorCanClaimFundsNOCLAIMCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestFailContractorCanClaimFundsNOCLAIM(decoded));
            }
            if let Ok(decoded) =
                <TestFailEmployerCanClaimBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestFailEmployerCanClaimBounty(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestFailEmployerCanCreateBountyNOVALUECall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestFailEmployerCanCreateBountyNOVALUE(decoded));
            }
            if let Ok (decoded) = < TestFailEmployerCanCreatePrivateBountyNOVALUECall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (BountyscapeTestCalls :: TestFailEmployerCanCreatePrivateBountyNOVALUE (decoded)) }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(BountyscapeTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for BountyscapeTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                BountyscapeTestCalls::IsScript(element) => element.encode(),
                BountyscapeTestCalls::IsTest(element) => element.encode(),
                BountyscapeTestCalls::Failed(element) => element.encode(),
                BountyscapeTestCalls::SetUp(element) => element.encode(),
                BountyscapeTestCalls::TestAnyoneCanListBounties(element) => element.encode(),
                BountyscapeTestCalls::TestAnyoneCanListBountiesAndGetStatus(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestContractorCanClaimBounty(element) => element.encode(),
                BountyscapeTestCalls::TestContractorCanClaimFunds(element) => element.encode(),
                BountyscapeTestCalls::TestContractorCanClaimFundsEmpolyerCanBurnMultiple(
                    element,
                ) => element.encode(),
                BountyscapeTestCalls::TestContractorCanClaimFundsMultiple(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestContractorCompleteBounty(element) => element.encode(),
                BountyscapeTestCalls::TestEmployerCanApproveCompletedBounty(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestEmployerCanCreateBounty(element) => element.encode(),
                BountyscapeTestCalls::TestEmployerCanCreatePrivateBounty(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestFailContractorCanClaimFundsNOCLAIM(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestFailEmployerCanClaimBounty(element) => element.encode(),
                BountyscapeTestCalls::TestFailEmployerCanCreateBountyNOVALUE(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestFailEmployerCanCreatePrivateBountyNOVALUE(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for BountyscapeTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BountyscapeTestCalls::IsScript(element) => element.fmt(f),
                BountyscapeTestCalls::IsTest(element) => element.fmt(f),
                BountyscapeTestCalls::Failed(element) => element.fmt(f),
                BountyscapeTestCalls::SetUp(element) => element.fmt(f),
                BountyscapeTestCalls::TestAnyoneCanListBounties(element) => element.fmt(f),
                BountyscapeTestCalls::TestAnyoneCanListBountiesAndGetStatus(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestContractorCanClaimBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestContractorCanClaimFunds(element) => element.fmt(f),
                BountyscapeTestCalls::TestContractorCanClaimFundsEmpolyerCanBurnMultiple(
                    element,
                ) => element.fmt(f),
                BountyscapeTestCalls::TestContractorCanClaimFundsMultiple(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestContractorCompleteBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestEmployerCanApproveCompletedBounty(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestEmployerCanCreateBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestEmployerCanCreatePrivateBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestFailContractorCanClaimFundsNOCLAIM(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestFailEmployerCanClaimBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestFailEmployerCanCreateBountyNOVALUE(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestFailEmployerCanCreatePrivateBountyNOVALUE(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsScriptCall> for BountyscapeTestCalls {
        fn from(var: IsScriptCall) -> Self {
            BountyscapeTestCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<IsTestCall> for BountyscapeTestCalls {
        fn from(var: IsTestCall) -> Self {
            BountyscapeTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for BountyscapeTestCalls {
        fn from(var: FailedCall) -> Self {
            BountyscapeTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for BountyscapeTestCalls {
        fn from(var: SetUpCall) -> Self {
            BountyscapeTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestAnyoneCanListBountiesCall> for BountyscapeTestCalls {
        fn from(var: TestAnyoneCanListBountiesCall) -> Self {
            BountyscapeTestCalls::TestAnyoneCanListBounties(var)
        }
    }
    impl ::std::convert::From<TestAnyoneCanListBountiesAndGetStatusCall> for BountyscapeTestCalls {
        fn from(var: TestAnyoneCanListBountiesAndGetStatusCall) -> Self {
            BountyscapeTestCalls::TestAnyoneCanListBountiesAndGetStatus(var)
        }
    }
    impl ::std::convert::From<TestContractorCanClaimBountyCall> for BountyscapeTestCalls {
        fn from(var: TestContractorCanClaimBountyCall) -> Self {
            BountyscapeTestCalls::TestContractorCanClaimBounty(var)
        }
    }
    impl ::std::convert::From<TestContractorCanClaimFundsCall> for BountyscapeTestCalls {
        fn from(var: TestContractorCanClaimFundsCall) -> Self {
            BountyscapeTestCalls::TestContractorCanClaimFunds(var)
        }
    }
    impl ::std::convert::From<TestContractorCanClaimFundsEmpolyerCanBurnMultipleCall>
        for BountyscapeTestCalls
    {
        fn from(var: TestContractorCanClaimFundsEmpolyerCanBurnMultipleCall) -> Self {
            BountyscapeTestCalls::TestContractorCanClaimFundsEmpolyerCanBurnMultiple(var)
        }
    }
    impl ::std::convert::From<TestContractorCanClaimFundsMultipleCall> for BountyscapeTestCalls {
        fn from(var: TestContractorCanClaimFundsMultipleCall) -> Self {
            BountyscapeTestCalls::TestContractorCanClaimFundsMultiple(var)
        }
    }
    impl ::std::convert::From<TestContractorCompleteBountyCall> for BountyscapeTestCalls {
        fn from(var: TestContractorCompleteBountyCall) -> Self {
            BountyscapeTestCalls::TestContractorCompleteBounty(var)
        }
    }
    impl ::std::convert::From<TestEmployerCanApproveCompletedBountyCall> for BountyscapeTestCalls {
        fn from(var: TestEmployerCanApproveCompletedBountyCall) -> Self {
            BountyscapeTestCalls::TestEmployerCanApproveCompletedBounty(var)
        }
    }
    impl ::std::convert::From<TestEmployerCanCreateBountyCall> for BountyscapeTestCalls {
        fn from(var: TestEmployerCanCreateBountyCall) -> Self {
            BountyscapeTestCalls::TestEmployerCanCreateBounty(var)
        }
    }
    impl ::std::convert::From<TestEmployerCanCreatePrivateBountyCall> for BountyscapeTestCalls {
        fn from(var: TestEmployerCanCreatePrivateBountyCall) -> Self {
            BountyscapeTestCalls::TestEmployerCanCreatePrivateBounty(var)
        }
    }
    impl ::std::convert::From<TestFailContractorCanClaimFundsNOCLAIMCall> for BountyscapeTestCalls {
        fn from(var: TestFailContractorCanClaimFundsNOCLAIMCall) -> Self {
            BountyscapeTestCalls::TestFailContractorCanClaimFundsNOCLAIM(var)
        }
    }
    impl ::std::convert::From<TestFailEmployerCanClaimBountyCall> for BountyscapeTestCalls {
        fn from(var: TestFailEmployerCanClaimBountyCall) -> Self {
            BountyscapeTestCalls::TestFailEmployerCanClaimBounty(var)
        }
    }
    impl ::std::convert::From<TestFailEmployerCanCreateBountyNOVALUECall> for BountyscapeTestCalls {
        fn from(var: TestFailEmployerCanCreateBountyNOVALUECall) -> Self {
            BountyscapeTestCalls::TestFailEmployerCanCreateBountyNOVALUE(var)
        }
    }
    impl ::std::convert::From<TestFailEmployerCanCreatePrivateBountyNOVALUECall>
        for BountyscapeTestCalls
    {
        fn from(var: TestFailEmployerCanCreatePrivateBountyNOVALUECall) -> Self {
            BountyscapeTestCalls::TestFailEmployerCanCreatePrivateBountyNOVALUE(var)
        }
    }
    impl ::std::convert::From<VmCall> for BountyscapeTestCalls {
        fn from(var: VmCall) -> Self {
            BountyscapeTestCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
