pub use bountyscape_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod bountyscape_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "BountyscapeTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static BOUNTYSCAPETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testAnyoneCanListBounties\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testAnyoneCanListBountiesAndGetStatus\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCanClaimBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCanClaimFunds\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCanClaimFundsMultiple\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testContractorCompleteBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testEmployerCanApproveCompletedBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testEmployerCanCreateBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testEmployerCanCreatePrivateBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailContractorCanClaimFundsNOCLAIM\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailEmployerCanClaimBounty\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailEmployerCanCreateBountyNOVALUE\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFailEmployerCanCreatePrivateBountyNOVALUE\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static BOUNTYSCAPETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040526000805462ff00ff19166201000117905534801561002157600080fd5b50617f4a806100316000396000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c8063524b446311620000af578063908157b6116200007a578063908157b614620001e0578063ba414fa614620001ea578063f2874bc71462000205578063f8ccbf47146200020f578063fa7626d4146200022357600080fd5b8063524b446314620001b85780635698e22a14620001c25780635734e61414620001cc57806382ca165f14620001d657600080fd5b80632b0ebe9f11620000fc5780632b0ebe9f146200015c578063336f28f6146200016657806339a375ef14620001705780633a768463146200017a57806340913fb914620001ae57600080fd5b80630a9254e4146200013257806319692851146200013e5780631c617b1314620001485780631d2dba6b1462000152575b600080fd5b6200013c62000231565b005b6200013c62000d4f565b6200013c6200155b565b6200013c620016c5565b6200013c62001763565b6200013c6200180b565b6200013c62001cd1565b6200019160008051602062007ef583398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6200013c620021e0565b6200013c6200227e565b6200013c62002c24565b6200013c62002daa565b6200013c62002e4f565b6200013c62002fe5565b620001f46200308a565b6040519015158152602001620001a5565b6200013c620031bb565b600054620001f49062010000900460ff1681565b600054620001f49060ff1681565b6040516200023f9062003725565b604051809103906000f0801580156200025c573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b03929092169190911790556040516200028b9062003733565b604051809103906000f080158015620002a8573d6000803e3d6000fd5b50600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b03198152620a11ce600482015260008051602062007ef58339815191529063ffa18649906024016020604051808303816000875af11580156200031c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000342919062003759565b600a80546001600160a01b0319166001600160a01b0392909216918217905560405163c88a5e6d60e01b815260008051602062007ef58339815191529163c88a5e6d916200039f919068056bc75e2d63100000906004016200377e565b600060405180830381600087803b158015620003ba57600080fd5b505af1158015620003cf573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b0390921660048301526024820152600860448201526732b6b83637bcb2b960c11b606482015260008051602062007ef5833981519152925063c657c7189150608401600060405180830381600087803b1580156200044657600080fd5b505af11580156200045b573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b158015620004b457600080fd5b505af1158015620004c9573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b0316633e9b347f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200051e57600080fd5b505af115801562000533573d6000803e3d6000fd5b50506040516001625e79b760e01b03198152610b0b600482015260008051602062007ef5833981519152925063ffa1864991506024016020604051808303816000875af115801562000589573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005af919062003759565b600b80546001600160a01b0319166001600160a01b0392909216918217905560405163c88a5e6d60e01b815260008051602062007ef58339815191529163c88a5e6d916200060c919068056bc75e2d63100000906004016200377e565b600060405180830381600087803b1580156200062757600080fd5b505af11580156200063c573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048301526024820152600a60448201526931b7b73a3930b1ba37b960b11b606482015260008051602062007ef5833981519152925063c657c7189150608401600060405180830381600087803b158015620006b557600080fd5b505af1158015620006ca573d6000803e3d6000fd5b5050600b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b1580156200072357600080fd5b505af115801562000738573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b0316631ccd79106040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200078d57600080fd5b505af1158015620007a2573d6000803e3d6000fd5b50506040516001625e79b760e01b0319815261b0b2600482015260008051602062007ef5833981519152925063ffa1864991506024016020604051808303816000875af1158015620007f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200081e919062003759565b600c80546001600160a01b0319166001600160a01b0392909216918217905560405163c88a5e6d60e01b815260008051602062007ef58339815191529163c88a5e6d916200087b919068056bc75e2d63100000906004016200377e565b600060405180830381600087803b1580156200089657600080fd5b505af1158015620008ab573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048301526024820152600b60448201526a31b7b73a3930b1ba37b91960a91b606482015260008051602062007ef5833981519152925063c657c7189150608401600060405180830381600087803b1580156200092557600080fd5b505af11580156200093a573d6000803e3d6000fd5b5050600c5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b1580156200099357600080fd5b505af1158015620009a8573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b0316631ccd79106040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620009fd57600080fd5b505af115801562000a12573d6000803e3d6000fd5b50506040516001625e79b760e01b0319815261b0b3600482015260008051602062007ef5833981519152925063ffa1864991506024016020604051808303816000875af115801562000a68573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a8e919062003759565b600d80546001600160a01b0319166001600160a01b0392909216918217905560405163c88a5e6d60e01b815260008051602062007ef58339815191529163c88a5e6d9162000aeb919068056bc75e2d63100000906004016200377e565b600060405180830381600087803b15801562000b0657600080fd5b505af115801562000b1b573d6000803e3d6000fd5b5050600d54604080516318caf8e360e31b81526001600160a01b0390921660048301526024820152600b60448201526a636f6e74726163746f723360a81b606482015260008051602062007ef5833981519152925063c657c7189150608401600060405180830381600087803b15801562000b9557600080fd5b505af115801562000baa573d6000803e3d6000fd5b5050600d5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b15801562000c0357600080fd5b505af115801562000c18573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b0316631ccd79106040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000c6d57600080fd5b505af115801562000c82573d6000803e3d6000fd5b50506008546009546040516375f890ab60e01b81526001600160a01b039182166004820152911692506375f890ab9150602401600060405180830381600087803b15801562000cd057600080fd5b505af115801562000ce5573d6000803e3d6000fd5b5050600954600854604051631d493a0f60e21b81526001600160a01b03918216600482015291169250637524e83c91506024015b600060405180830381600087803b15801562000d3457600080fd5b505af115801562000d49573d6000803e3d6000fd5b50505050565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b15801562000da457600080fd5b505af115801562000db9573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a76400009062000df79060040162003797565b6000604051808303818588803b15801562000e1157600080fd5b505af115801562000e26573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b15801562000e8157600080fd5b505af115801562000e96573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a76400009062000ed490600401620037c6565b6000604051808303818588803b15801562000eee57600080fd5b505af115801562000f03573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b15801562000f5e57600080fd5b505af115801562000f73573d6000803e3d6000fd5b5050600854600b5460405163bef7143d60e01b81526001600160a01b03928316945063bef7143d935062000fae9290911690600401620037f0565b600060405180830381600087803b15801562000fc957600080fd5b505af115801562000fde573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b1580156200103757600080fd5b505af11580156200104c573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a7640000906200108a9060040162003834565b6000604051808303818588803b158015620010a457600080fd5b505af1158015620010b9573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b1580156200111457600080fd5b505af115801562001129573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a764000090620011679060040162003857565b6000604051808303818588803b1580156200118157600080fd5b505af115801562001196573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b158015620011f157600080fd5b505af115801562001206573d6000803e3d6000fd5b5050600854600b5460405163bef7143d60e01b81526001600160a01b03928316945063bef7143d935062001241929091169060040162003881565b600060405180830381600087803b1580156200125c57600080fd5b505af115801562001271573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b158015620012ca57600080fd5b505af1158015620012df573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a7640000906200131d90600401620038ab565b6000604051808303818588803b1580156200133757600080fd5b505af11580156200134c573d6000803e3d6000fd5b505060085460408051630cf0ac1d60e01b815290516001600160a01b039092169450630cf0ac1d935060048082019350600092918290030181865afa1580156200139a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620013c491908101906200396e565b506008546040516311582f6960e11b815262001443916001600160a01b0316906322b05ed290620013f89060040162003797565b602060405180830381865afa15801562001416573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200143c919062003a8b565b15620033af565b6008546040516311582f6960e11b8152620014c0916001600160a01b0316906322b05ed2906200147690600401620037c6565b602060405180830381865afa15801562001494573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014ba919062003a8b565b620033af565b6008546040516311582f6960e11b8152620014f3916001600160a01b0316906322b05ed290620013f89060040162003834565b6008546040516311582f6960e11b815262001526916001600160a01b0316906322b05ed290620014769060040162003857565b6008546040516311582f6960e11b815262001559916001600160a01b0316906322b05ed290620013f890600401620038ab565b565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b158015620015b057600080fd5b505af1158015620015c5573d6000803e3d6000fd5b5050600854600b54604051636ba751df60e11b81526001600160a01b03928316945063d74ea3be9350670de0b6b3a7640000926200160892169060040162003aaf565b6000604051808303818588803b1580156200162257600080fd5b505af115801562001637573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b81526200155995506001600160a01b03928316945062fdd58e93506200167992909116906000906004016200377e565b602060405180830381865afa15801562001697573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016bd919062003ae9565b600162003427565b600b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b1580156200171a57600080fd5b505af11580156200172f573d6000803e3d6000fd5b5050600854604051634377027560e01b81526001600160a01b0390911692506343770275915062000d199060040162003797565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b158015620017b857600080fd5b505af1158015620017cd573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a764000090620016089060040162003797565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b1580156200186057600080fd5b505af115801562001875573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a764000090620018b39060040162003797565b6000604051808303818588803b158015620018cd57600080fd5b505af1158015620018e2573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b1580156200193d57600080fd5b505af115801562001952573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a7640000906200199090600401620037c6565b6000604051808303818588803b158015620019aa57600080fd5b505af1158015620019bf573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b15801562001a1a57600080fd5b505af115801562001a2f573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a76400009062001a6d9060040162003834565b6000604051808303818588803b15801562001a8757600080fd5b505af115801562001a9c573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b15801562001af757600080fd5b505af115801562001b0c573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a76400009062001b4a9060040162003857565b6000604051808303818588803b15801562001b6457600080fd5b505af115801562001b79573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b15801562001bd457600080fd5b505af115801562001be9573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a76400009062001c2790600401620038ab565b6000604051808303818588803b15801562001c4157600080fd5b505af115801562001c56573d6000803e3d6000fd5b505060085460408051630cf0ac1d60e01b815290516001600160a01b039092169450630cf0ac1d935060048082019350600092918290030181865afa15801562001ca4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001cce91908101906200396e565b50565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b15801562001d2657600080fd5b505af115801562001d3b573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a76400009062001d799060040162003797565b6000604051808303818588803b15801562001d9357600080fd5b505af115801562001da8573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b815262001dea95506001600160a01b03928316945062fdd58e93506200167992909116906000906004016200377e565b600854600b54604051627eeac760e11b815262001e73926001600160a01b039081169262fdd58e9262001e2792909116906000906004016200377e565b602060405180830381865afa15801562001e45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e6b919062003ae9565b600062003427565b600b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b15801562001ec857600080fd5b505af115801562001edd573d6000803e3d6000fd5b5050600854604051634377027560e01b81526001600160a01b0390911692506343770275915062001f119060040162003797565b600060405180830381600087803b15801562001f2c57600080fd5b505af115801562001f41573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b15801562001f9a57600080fd5b505af115801562001faf573d6000803e3d6000fd5b5050600854600b5460405163bef7143d60e01b81526001600160a01b03928316945063bef7143d935062001fea929091169060040162003b03565b600060405180830381600087803b1580156200200557600080fd5b505af11580156200201a573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b81526200205994506001600160a01b03928316935062fdd58e92620016799216906000906004016200377e565b600854600b54604051627eeac760e11b815262002096926001600160a01b039081169262fdd58e9262001e2792909116906000906004016200377e565b600b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b158015620020eb57600080fd5b505af115801562002100573d6000803e3d6000fd5b505060085460405163b4b46d4760e01b81526001600160a01b03909116925063b4b46d479150620021349060040162003797565b600060405180830381600087803b1580156200214f57600080fd5b505af115801562002164573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b8152620021a394506001600160a01b03928316935062fdd58e9262001e279216906000906004016200377e565b600854600b54604051627eeac760e11b815262001559926001600160a01b039081169262fdd58e926200167992909116906000906004016200377e565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b1580156200223557600080fd5b505af11580156200224a573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b915062000d199060040162003797565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b158015620022d357600080fd5b505af1158015620022e8573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a764000090620023269060040162003797565b6000604051808303818588803b1580156200234057600080fd5b505af115801562002355573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b81526200239795506001600160a01b03928316945062fdd58e93506200167992909116906000906004016200377e565b600854600b54604051627eeac760e11b8152620023d4926001600160a01b039081169262fdd58e9262001e2792909116906000906004016200377e565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b1580156200242957600080fd5b505af11580156200243e573d6000803e3d6000fd5b5050600880546040516306868c4b60e01b81526020600482015260248101929092526728b6a4a82329a49960c11b60448301526001600160a01b031692506306868c4b9150670de0b6b3a7640000906064016000604051808303818588803b158015620024aa57600080fd5b505af1158015620024bf573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b1580156200251a57600080fd5b505af11580156200252f573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a7640000906200256d9060040162003834565b6000604051808303818588803b1580156200258757600080fd5b505af11580156200259c573d6000803e3d6000fd5b5050600b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152935063ca669fa792506024019050600060405180830381600087803b158015620025f757600080fd5b505af11580156200260c573d6000803e3d6000fd5b5050600854604051634377027560e01b81526001600160a01b03909116925063437702759150620026409060040162003797565b600060405180830381600087803b1580156200265b57600080fd5b505af115801562002670573d6000803e3d6000fd5b5050600c5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b158015620026c957600080fd5b505af1158015620026de573d6000803e3d6000fd5b5050600854604051634377027560e01b81526001600160a01b03909116925063437702759150620027129060040162003797565b600060405180830381600087803b1580156200272d57600080fd5b505af115801562002742573d6000803e3d6000fd5b5050600d5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b1580156200279b57600080fd5b505af1158015620027b0573d6000803e3d6000fd5b5050600854604051634377027560e01b81526001600160a01b03909116925063437702759150620027e49060040162003797565b600060405180830381600087803b158015620027ff57600080fd5b505af115801562002814573d6000803e3d6000fd5b5050600d5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa79150602401600060405180830381600087803b1580156200286d57600080fd5b505af115801562002882573d6000803e3d6000fd5b5050600854604051634377027560e01b81526001600160a01b03909116925063437702759150620028b690600401620037c6565b600060405180830381600087803b158015620028d157600080fd5b505af1158015620028e6573d6000803e3d6000fd5b5050600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef5833981519152925063ca669fa791506024015b600060405180830381600087803b1580156200294057600080fd5b505af115801562002955573d6000803e3d6000fd5b5050600854600b5460405163bef7143d60e01b81526001600160a01b03928316945063bef7143d935062002990929091169060040162003b03565b600060405180830381600087803b158015620029ab57600080fd5b505af1158015620029c0573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b8152620029ff94506001600160a01b03928316935062fdd58e92620016799216906000906004016200377e565b600854600b54604051627eeac760e11b815262002a3c926001600160a01b039081169262fdd58e9262001e2792909116906000906004016200377e565b600b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b15801562002a9157600080fd5b505af115801562002aa6573d6000803e3d6000fd5b505060085460405163b4b46d4760e01b81526001600160a01b03909116925063b4b46d47915062002ada9060040162003797565b600060405180830381600087803b15801562002af557600080fd5b505af115801562002b0a573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b815262002b4994506001600160a01b03928316935062fdd58e9262001e279216906000906004016200377e565b600854600b54604051627eeac760e11b815262002b86926001600160a01b039081169262fdd58e926200167992909116906000906004016200377e565b600b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b15801562002bdb57600080fd5b505af115801562002bf0573d6000803e3d6000fd5b505060085460405163c4f7797760e01b81526001600160a01b03909116925063c4f779779150620021349060040162003797565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b15801562002c7957600080fd5b505af115801562002c8e573d6000803e3d6000fd5b5050600854604051634377027560e01b81526001600160a01b0390911692506343770275915062002cc29060040162003797565b600060405180830381600087803b15801562002cdd57600080fd5b505af115801562002cf2573d6000803e3d6000fd5b50506008546040516350476d2d60e11b8152600093506001600160a01b03909116915063a08eda5a9062002d299060040162003797565b600060405180830381865afa15801562002d47573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262002d71919081019062003b2c565b905062001cce8160008151811062002d8d5762002d8d62003bcf565b6020908102919091010151600b546001600160a01b031662003522565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b15801562002dff57600080fd5b505af115801562002e14573d6000803e3d6000fd5b5050600854600b54604051636ba751df60e11b81526001600160a01b03928316945063d74ea3be935062000d19929091169060040162003aaf565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b15801562002ea457600080fd5b505af115801562002eb9573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a76400009062002ef79060040162003797565b6000604051808303818588803b15801562002f1157600080fd5b505af115801562002f26573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b815262002f6895506001600160a01b03928316945062fdd58e93506200167992909116906000906004016200377e565b600854600b54604051627eeac760e11b815262002fa5926001600160a01b039081169262fdd58e9262001e2792909116906000906004016200377e565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa79060240162002925565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b1580156200303a57600080fd5b505af11580156200304f573d6000803e3d6000fd5b5050600854600b5460405163bef7143d60e01b81526001600160a01b03928316945063bef7143d935062000d19929091169060040162003b03565b60008054610100900460ff1615620030ab5750600054610100900460ff1690565b600060008051602062007ef58339815191523b15620031b65760405160009060008051602062007ef5833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc490620031189083906519985a5b195960d21b906020016200377e565b60408051601f198184030181529082905262003138929160200162003be5565b60408051601f1981840301815290829052620031549162003c18565b6000604051808303816000865af19150503d806000811462003193576040519150601f19603f3d011682016040523d82523d6000602084013e62003198565b606091505b5091505080806020019051810190620031b2919062003a8b565b9150505b919050565b600a5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b1580156200321057600080fd5b505af115801562003225573d6000803e3d6000fd5b50506008546040516306868c4b60e01b81526001600160a01b0390911692506306868c4b9150670de0b6b3a764000090620032639060040162003797565b6000604051808303818588803b1580156200327d57600080fd5b505af115801562003292573d6000803e3d6000fd5b5050600854600954604051627eeac760e11b8152620032d495506001600160a01b03928316945062fdd58e93506200167992909116906000906004016200377e565b600854600b54604051627eeac760e11b815262003311926001600160a01b039081169262fdd58e9262001e2792909116906000906004016200377e565b600b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007ef58339815191529063ca669fa790602401600060405180830381600087803b1580156200336657600080fd5b505af11580156200337b573d6000803e3d6000fd5b5050600854604051634377027560e01b81526001600160a01b03909116925063437702759150620028b69060040162003797565b8062001cce577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620034159060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a162001cce6200361c565b8082146200351e577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200349a9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051620034d3919062003c36565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516200350c919062003c6f565b60405180910390a16200351e6200361c565b5050565b806001600160a01b0316826001600160a01b0316146200351e577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620035aa9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f81604051620035e3919062003c9a565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f826040516200350c919062003cc5565b60008051602062007ef58339815191523b1562003714576040805160008051602062007ef5833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052620036af929160200162003be5565b60408051601f1981840301815290829052620036cb9162003c18565b6000604051808303816000865af19150503d80600081146200370a576040519150601f19603f3d011682016040523d82523d6000602084013e6200370f565b606091505b505050505b6000805461ff001916610100179055565b6137d28062003cf183390190565b610a3280620074c383390190565b80516001600160a01b0381168114620031b657600080fd5b6000602082840312156200376c57600080fd5b620037778262003741565b9392505050565b6001600160a01b03929092168252602082015260400190565b602081526000620037c0602083016008815267145b52541194d25160c21b602082015260400190565b92915050565b602081526000620037c060208301600981526828b6a4a82329a4a21960b91b602082015260400190565b6040815260006200381a60408301600981526828b6a4a82329a4a21960b91b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b602080825260099082015268516d4950465349443360b81b604082015260600190565b602081526000620037c0602083016009815268145b52541194d2510d60ba1b602082015260400190565b6040815260006200381a604083016009815268145b52541194d2510d60ba1b602082015260400190565b602080825260099082015268516d4950465349443560b81b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620039105762003910620038ce565b604052919050565b600067ffffffffffffffff821115620039355762003935620038ce565b5060051b60200190565b60005b838110156200395c57818101518382015260200162003942565b8381111562000d495750506000910152565b600060208083850312156200398257600080fd5b825167ffffffffffffffff808211156200399b57600080fd5b8185019150601f8681840112620039b157600080fd5b8251620039c8620039c28262003918565b620038e4565b81815260059190911b84018501908581019089831115620039e857600080fd5b8686015b8381101562003a7d5780518681111562003a065760008081fd5b8701603f81018c1362003a195760008081fd5b8881015160408882111562003a325762003a32620038ce565b62003a45828901601f19168c01620038e4565b8281528e8284860101111562003a5b5760008081fd5b62003a6c838d83018487016200393f565b8652505050918701918701620039ec565b509998505050505050505050565b60006020828403121562003a9e57600080fd5b815180151581146200377757600080fd5b6040808252600f908201526e516d4950465349445072697661746560881b60608201526001600160a01b0391909116602082015260800190565b60006020828403121562003afc57600080fd5b5051919050565b6040815260006200381a604083016008815267145b52541194d25160c21b602082015260400190565b6000602080838503121562003b4057600080fd5b825167ffffffffffffffff81111562003b5857600080fd5b8301601f8101851362003b6a57600080fd5b805162003b7b620039c28262003918565b81815260059190911b8201830190838101908783111562003b9b57600080fd5b928401925b8284101562003bc45762003bb48462003741565b8252928401929084019062003ba0565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160e01b031983168152815160009062003c0a8160048501602087016200393f565b919091016004019392505050565b6000825162003c2c8184602087016200393f565b9190910192915050565b60408152600062003c6160408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b60408152600062003c6160408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006200381a60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6040815260006200381a60408301600a815269080808081058dd1d585b60b21b60208201526040019056fe6080604052600680546001600160a01b031916905560006007553480156200002657600080fd5b506040518060800160405280605d815260200162003775605d91396200004c8162000065565b5060016004556200005f60003362000077565b62000295565b6002620000738282620001c9565b5050565b60008281526003602090815260408083206001600160a01b038516845290915290205462000073908390839060ff16620000735760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000e03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200014f57607f821691505b6020821081036200017057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001c457600081815260208120601f850160051c810160208610156200019f5750805b601f850160051c820191505b81811015620001c057828155600101620001ab565b5050505b505050565b81516001600160401b03811115620001e557620001e562000124565b620001fd81620001f684546200013a565b8462000176565b602080601f8311600181146200023557600084156200021c5750858301515b600019600386901b1c1916600185901b178555620001c0565b600085815260208120601f198616915b82811015620002665788860151825594840194600190910190840162000245565b5085821015620002855787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6134d080620002a56000396000f3fe6080604052600436106102245760003560e01c806375f890ab11610123578063bef7143d116100ab578063d8eaae3c1161006f578063d8eaae3c1461068e578063e706a639146106a3578063e985e9c5146106c3578063f242432a1461070c578063f88e32041461072c57600080fd5b8063bef7143d146105ee578063c4f779771461060e578063d159a9421461062e578063d547741f1461065b578063d74ea3be1461067b57600080fd5b8063a217fddf116100f2578063a217fddf14610553578063a22cb46514610568578063a406370a14610588578063a5c42ef1146105b8578063b4b46d47146105ce57600080fd5b806375f890ab146104c65780638b4f0496146104e657806391d1485414610506578063a08eda5a1461052657600080fd5b80632eb2c2d6116101b15780634514939011610175578063451493901461040c5780634cf12d261461042c5780634e1273f41461044c57806361775eb01461047957806361d027b31461048e57600080fd5b80632eb2c2d6146103775780632f2ff15d1461039757806336568abe146103b75780633e9b347f146103d757806343770275146103ec57600080fd5b80630e89341c116101f85780630e89341c146102c35780631ccd7910146102f057806322b05ed2146103055780632426bb3814610325578063248a9ca31461034757600080fd5b8062fdd58e1461022957806301ffc9a71461025c57806306868c4b1461028c5780630cf0ac1d146102a1575b600080fd5b34801561023557600080fd5b506102496102443660046126bd565b61074e565b6040519081526020015b60405180910390f35b34801561026857600080fd5b5061027c6102773660046126fd565b6107e4565b6040519015158152602001610253565b61029f61029a3660046127cf565b6107f5565b005b3480156102ad57600080fd5b506102b6610967565b6040516102539190612867565b3480156102cf57600080fd5b506102e36102de3660046128c9565b610a95565b60405161025391906128e2565b3480156102fc57600080fd5b5061029f610b29565b34801561031157600080fd5b5061027c6103203660046127cf565b610ba8565b34801561033157600080fd5b5061024960008051602061342883398151915281565b34801561035357600080fd5b506102496103623660046128c9565b60009081526003602052604090206001015490565b34801561038357600080fd5b5061029f610392366004612989565b610c2a565b3480156103a357600080fd5b5061029f6103b2366004612a32565b610c76565b3480156103c357600080fd5b5061029f6103d2366004612a32565b610ca0565b3480156103e357600080fd5b5061029f610d1e565b3480156103f857600080fd5b5061029f6104073660046127cf565b610d9b565b34801561041857600080fd5b506102e36104273660046128c9565b610eb8565b34801561043857600080fd5b506102e36104473660046127cf565b610f52565b34801561045857600080fd5b5061046c610467366004612a5e565b610f94565b6040516102539190612b63565b34801561048557600080fd5b5061029f6110bd565b34801561049a57600080fd5b506006546104ae906001600160a01b031681565b6040516001600160a01b039091168152602001610253565b3480156104d257600080fd5b5061029f6104e1366004612b76565b6110d5565b3480156104f257600080fd5b506104ae610501366004612b91565b61114e565b34801561051257600080fd5b5061027c610521366004612a32565b611186565b34801561053257600080fd5b506105466105413660046127cf565b6111b1565b6040516102539190612bb3565b34801561055f57600080fd5b50610249600081565b34801561057457600080fd5b5061029f610583366004612c00565b61128a565b34801561059457600080fd5b5061027c6105a33660046128c9565b600b6020526000908152604090205460ff1681565b3480156105c457600080fd5b5061024960075481565b3480156105da57600080fd5b5061029f6105e93660046127cf565b611295565b3480156105fa57600080fd5b5061029f610609366004612c3c565b611521565b34801561061a57600080fd5b5061029f6106293660046127cf565b611674565b34801561063a57600080fd5b506102496106493660046128c9565b60096020526000908152604090205481565b34801561066757600080fd5b5061029f610676366004612a32565b6117f6565b61029f610689366004612c3c565b61181b565b34801561069a57600080fd5b5061029f6119af565b3480156106af57600080fd5b506102496106be3660046127cf565b6119c7565b3480156106cf57600080fd5b5061027c6106de366004612c80565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561071857600080fd5b5061029f610727366004612caa565b611a9a565b34801561073857600080fd5b5061024960008051602061340883398151915281565b60006001600160a01b0383166107be5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006107ef82611adf565b92915050565b61080d60008051602061342883398151915233611186565b6108555760405162461bcd60e51b815260206004820152601960248201527821b0b63632b91034b9903737ba1030b71032b6b83637bcb2b960391b60448201526064016107b5565b600034116108755760405162461bcd60e51b81526004016107b590612d0e565b60065460075460408051602081019091526000815234926108a4926001600160a01b0390911691600190611b04565b6006546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156108de573d6000803e3d6000fd5b5060075460009081526008602052604090206108fa8382612dcd565b506007805460009081526009602052604090819020839055905490517fd03c9595063e238ef5abf908f74cfe2963bc5c60cde40d8f99f13d8bc6cd9be291610946918591908590612e8c565b60405180910390a16007805490600061095e83612ec7565b91905055505050565b606060006007546001600160401b038111156109855761098561271a565b6040519080825280602002602001820160405280156109b857816020015b60608152602001906001900390816109a35790505b50905060005b600754811015610a8f57600081815260086020526040902080546109e190612d53565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0d90612d53565b8015610a5a5780601f10610a2f57610100808354040283529160200191610a5a565b820191906000526020600020905b815481529060010190602001808311610a3d57829003601f168201915b5050505050828281518110610a7157610a71612ee0565b60200260200101819052508080610a8790612ec7565b9150506109be565b50919050565b606060028054610aa490612d53565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad090612d53565b8015610b1d5780601f10610af257610100808354040283529160200191610b1d565b820191906000526020600020905b815481529060010190602001808311610b0057829003601f168201915b50505050509050919050565b610b4160008051602061342883398151915233611186565b15610b8e5760405162461bcd60e51b815260206004820152601d60248201527f43616c6c657220697320616c726561647920616e20656d706c6f79657200000060448201526064016107b5565b610ba660008051602061340883398151915233611c0f565b565b60405163e706a63960e01b81526000908190309063e706a63990610bd09086906004016128e2565b602060405180830381865afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190612ef6565b6000908152600b602052604090205460ff169392505050565b6001600160a01b038516331480610c465750610c4685336106de565b610c625760405162461bcd60e51b81526004016107b590612f0f565b610c6f8585858585611c19565b5050505050565b600082815260036020526040902060010154610c9181611df6565b610c9b8383611e03565b505050565b6001600160a01b0381163314610d105760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107b5565b610d1a8282611e89565b5050565b610d3660008051602061340883398151915233611186565b15610d835760405162461bcd60e51b815260206004820152601e60248201527f43616c6c657220697320616c7265616479206120636f6e74726163746f72000060448201526064016107b5565b610ba660008051602061342883398151915233611c0f565b610db360008051602061340883398151915233611186565b610dcf5760405162461bcd60e51b81526004016107b590612f5d565b60405163e706a63960e01b8152600090309063e706a63990610df59085906004016128e2565b602060405180830381865afa158015610e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e369190612ef6565b6000818152600a6020908152604080832080546001810182559084528284200180546001600160a01b03191633179055838352600882528083206009909252918290205491519293507fc7f5957ad976140878015d285fd47bebc799a9a4a33a8b17efd687a9b1434a3092610eac928591612f94565b60405180910390a15050565b60086020526000908152604090208054610ed190612d53565b80601f0160208091040260200160405190810160405280929190818152602001828054610efd90612d53565b8015610f4a5780601f10610f1f57610100808354040283529160200191610f4a565b820191906000526020600020905b815481529060010190602001808311610f2d57829003601f168201915b505050505081565b60606107ef604051806080016040528060538152602001613448605391398360405180604001604052806005815260200164173539b7b760d91b815250611ef0565b60608151835114610ff95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107b5565b600083516001600160401b038111156110145761101461271a565b60405190808252806020026020018201604052801561103d578160200160208202803683370190505b50905060005b84518110156110b55761108885828151811061106157611061612ee0565b602002602001015185838151811061107b5761107b612ee0565b602002602001015161074e565b82828151811061109a5761109a612ee0565b60209081029190910101526110ae81612ec7565b9050611043565b509392505050565b610ba6600080516020613408833981519152336117f6565b6110e0600033611186565b61112c5760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f74207468652061646d696e00000000000000000060448201526064016107b5565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600a602052816000526040600020818154811061116a57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60405163e706a63960e01b8152606090600090309063e706a639906111da9086906004016128e2565b602060405180830381865afa1580156111f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121b9190612ef6565b6000818152600a6020908152604091829020805483518184028101840190945280845293945091929083018282801561127d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161125f575b5050505050915050919050565b610d1a338383611f1f565b6112ad60008051602061340883398151915233611186565b6112c95760405162461bcd60e51b81526004016107b590612f5d565b60405163e706a63960e01b8152600090309063e706a639906112ef9085906004016128e2565b602060405180830381865afa15801561130c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113309190612ef6565b6000818152600a602090815260408083208054825181850281018501909352808352949550929390929183018282801561139357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611375575b509394506000935050505060005b82518110156113e9576113cd8382815181106113bf576113bf612ee0565b602002602001015133611fff565b156113d757600191505b806113e181612ec7565b9150506113a1565b50806114375760405162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206973206e6f74206120626f756e747920636c61696d6572000060448201526064016107b5565b6000838152600b602052604090205460ff166114655760405162461bcd60e51b81526004016107b59061302a565b60065460405163f3fef3a360e01b8152336004820152602481018590526001600160a01b039091169063f3fef3a390604401600060405180830381600087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b50505060008481526008602090815260408083206009909252918290205491517ff9d5b8621260e8c7e877bcee0fc9f0e573e710ba890884275d67dcfc19e0b0569350611513928791612f94565b60405180910390a150505050565b61153960008051602061342883398151915233611186565b6115855760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74206120656d706c6f796572000000000000000060448201526064016107b5565b60405163e706a63960e01b8152600090309063e706a639906115ab9086906004016128e2565b602060405180830381865afa1580156115c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ec9190612ef6565b6000818152600b602052604090819020805460ff19166001179055600654905163131f8abb60e31b81526001600160a01b038581166004830152602482018490529293509116906398fc55d8906044015b600060405180830381600087803b15801561165757600080fd5b505af115801561166b573d6000803e3d6000fd5b50505050505050565b61168c60008051602061340883398151915233611186565b6116a85760405162461bcd60e51b81526004016107b590612f5d565b60405163e706a63960e01b8152600090309063e706a639906116ce9085906004016128e2565b602060405180830381865afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f9190612ef6565b6000818152600b602052604090205490915060ff166117405760405162461bcd60e51b81526004016107b59061302a565b600161174c338361074e565b10156117a85760405162461bcd60e51b815260206004820152602560248201527f596f752068617665206e6f7420636f6d706c657465642074686520426f756e746044820152641e481e595d60da1b60648201526084016107b5565b60008181526009602052604090819020546006549151631f58fee360e11b8152336004820152602481018490526044810182905290916001600160a01b031690633eb1fdc69060640161163d565b60008281526003602052604090206001015461181181611df6565b610c9b8383611e89565b61183360008051602061342883398151915233611186565b61187b5760405162461bcd60e51b815260206004820152601960248201527821b0b63632b91034b9903737ba1030b71032b6b83637bcb2b960391b60448201526064016107b5565b6000341161189b5760405162461bcd60e51b81526004016107b590612d0e565b60065460075460408051602081019091526000815234926118ca926001600160a01b0390911691600190611b04565b6006546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015611904573d6000803e3d6000fd5b5060075460009081526008602052604090206119208482612dcd565b507fd03c9595063e238ef5abf908f74cfe2963bc5c60cde40d8f99f13d8bc6cd9be2836007548360405161195693929190612e8c565b60405180910390a16007805490600061196e83612ec7565b909155505060065460075460405163131f8abb60e31b81526001600160a01b03858116600483015260248201929092529116906398fc55d89060440161163d565b610ba6600080516020613428833981519152336117f6565b60008060005b6007548111611a935760008181526008602052604090208054611a7891906119f490612d53565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2090612d53565b8015611a6d5780601f10611a4257610100808354040283529160200191611a6d565b820191906000526020600020905b815481529060010190602001808311611a5057829003601f168201915b50505050508561207f565b15611a81578091505b80611a8b81612ec7565b9150506119cd565b5092915050565b6001600160a01b038516331480611ab65750611ab685336106de565b611ad25760405162461bcd60e51b81526004016107b590612f0f565b610c6f85858585856120b9565b60006001600160e01b03198216637965db0b60e01b14806107ef57506107ef826121e3565b6001600160a01b038416611b645760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107b5565b336000611b7085612233565b90506000611b7d85612233565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611baf90849061307b565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461166b8360008989898961227e565b610d1a8282611e03565b8151835114611c7b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107b5565b6001600160a01b038416611ca15760405162461bcd60e51b81526004016107b590613093565b3360005b8451811015611d88576000858281518110611cc257611cc2612ee0565b602002602001015190506000858381518110611ce057611ce0612ee0565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611d305760405162461bcd60e51b81526004016107b5906130d8565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611d6d90849061307b565b9250508190555050505080611d8190612ec7565b9050611ca5565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611dd8929190613122565b60405180910390a4611dee8187878787876123d9565b505050505050565b611e008133612494565b50565b611e0d8282611186565b610d1a5760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611e453390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611e938282611186565b15610d1a5760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060838383604051602001611f0793929190613150565b60405160208183030381529060405290509392505050565b816001600160a01b0316836001600160a01b031603611f925760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107b5565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6040516bffffffffffffffffffffffff19606083901b1660208201526000906034016040516020818303038152906040528051906020012083604051602001612060919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040528051906020012014905092915050565b6000816040516020016120929190613193565b60405160208183030381529060405280519060200120836040516020016120609190613193565b6001600160a01b0384166120df5760405162461bcd60e51b81526004016107b590613093565b3360006120eb85612233565b905060006120f885612233565b90506000868152602081815260408083206001600160a01b038c1684529091529020548581101561213b5760405162461bcd60e51b81526004016107b5906130d8565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061217890849061307b565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121d8848a8a8a8a8a61227e565b505050505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061221457506001600160e01b031982166303a24d0760e21b145b806107ef57506301ffc9a760e01b6001600160e01b03198316146107ef565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061226d5761226d612ee0565b602090810291909101015292915050565b6001600160a01b0384163b15611dee5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906122c290899089908890889088906004016131af565b6020604051808303816000875af19250505080156122fd575060408051601f3d908101601f191682019092526122fa918101906131f4565b60015b6123a957612309613211565b806308c379a003612342575061231d61322d565b806123285750612344565b8060405162461bcd60e51b81526004016107b591906128e2565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107b5565b6001600160e01b0319811663f23a6e6160e01b1461166b5760405162461bcd60e51b81526004016107b5906132b6565b6001600160a01b0384163b15611dee5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061241d90899089908890889088906004016132fe565b6020604051808303816000875af1925050508015612458575060408051601f3d908101601f19168201909252612455918101906131f4565b60015b61246457612309613211565b6001600160e01b0319811663bc197c8160e01b1461166b5760405162461bcd60e51b81526004016107b5906132b6565b61249e8282611186565b610d1a576124ab816124ed565b6124b68360206124ff565b6040516020016124c792919061335c565b60408051601f198184030181529082905262461bcd60e51b82526107b5916004016128e2565b60606107ef6001600160a01b03831660145b6060600061250e8360026133d1565b61251990600261307b565b6001600160401b038111156125305761253061271a565b6040519080825280601f01601f19166020018201604052801561255a576020820181803683370190505b509050600360fc1b8160008151811061257557612575612ee0565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125a4576125a4612ee0565b60200101906001600160f81b031916908160001a90535060006125c88460026133d1565b6125d390600161307b565b90505b600181111561264b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061260757612607612ee0565b1a60f81b82828151811061261d5761261d612ee0565b60200101906001600160f81b031916908160001a90535060049490941c93612644816133f0565b90506125d6565b50831561269a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107b5565b9392505050565b80356001600160a01b03811681146126b857600080fd5b919050565b600080604083850312156126d057600080fd5b6126d9836126a1565b946020939093013593505050565b6001600160e01b031981168114611e0057600080fd5b60006020828403121561270f57600080fd5b813561269a816126e7565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156127555761275561271a565b6040525050565b600082601f83011261276d57600080fd5b81356001600160401b038111156127865761278661271a565b60405161279d601f8301601f191660200182612730565b8181528460208386010111156127b257600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156127e157600080fd5b81356001600160401b038111156127f757600080fd5b6128038482850161275c565b949350505050565b60005b8381101561282657818101518382015260200161280e565b83811115612835576000848401525b50505050565b6000815180845261285381602086016020860161280b565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156128bc57603f198886030184526128aa85835161283b565b9450928501929085019060010161288e565b5092979650505050505050565b6000602082840312156128db57600080fd5b5035919050565b60208152600061269a602083018461283b565b60006001600160401b0382111561290e5761290e61271a565b5060051b60200190565b600082601f83011261292957600080fd5b81356020612936826128f5565b6040516129438282612730565b83815260059390931b850182019282810191508684111561296357600080fd5b8286015b8481101561297e5780358352918301918301612967565b509695505050505050565b600080600080600060a086880312156129a157600080fd5b6129aa866126a1565b94506129b8602087016126a1565b935060408601356001600160401b03808211156129d457600080fd5b6129e089838a01612918565b945060608801359150808211156129f657600080fd5b612a0289838a01612918565b93506080880135915080821115612a1857600080fd5b50612a258882890161275c565b9150509295509295909350565b60008060408385031215612a4557600080fd5b82359150612a55602084016126a1565b90509250929050565b60008060408385031215612a7157600080fd5b82356001600160401b0380821115612a8857600080fd5b818501915085601f830112612a9c57600080fd5b81356020612aa9826128f5565b604051612ab68282612730565b83815260059390931b8501820192828101915089841115612ad657600080fd5b948201945b83861015612afb57612aec866126a1565b82529482019490820190612adb565b96505086013592505080821115612b1157600080fd5b50612b1e85828601612918565b9150509250929050565b600081518084526020808501945080840160005b83811015612b5857815187529582019590820190600101612b3c565b509495945050505050565b60208152600061269a6020830184612b28565b600060208284031215612b8857600080fd5b61269a826126a1565b60008060408385031215612ba457600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015612bf45783516001600160a01b031683529284019291840191600101612bcf565b50909695505050505050565b60008060408385031215612c1357600080fd5b612c1c836126a1565b915060208301358015158114612c3157600080fd5b809150509250929050565b60008060408385031215612c4f57600080fd5b82356001600160401b03811115612c6557600080fd5b612c718582860161275c565b925050612a55602084016126a1565b60008060408385031215612c9357600080fd5b612c9c836126a1565b9150612a55602084016126a1565b600080600080600060a08688031215612cc257600080fd5b612ccb866126a1565b9450612cd9602087016126a1565b9350604086013592506060860135915060808601356001600160401b03811115612d0257600080fd5b612a258882890161275c565b60208082526025908201527f506c6561736520646566696e6520612072657761726420666f722074686520426040820152646f756e747960d81b606082015260800190565b600181811c90821680612d6757607f821691505b602082108103610a8f57634e487b7160e01b600052602260045260246000fd5b601f821115610c9b57600081815260208120601f850160051c81016020861015612dae5750805b601f850160051c820191505b81811015611dee57828155600101612dba565b81516001600160401b03811115612de657612de661271a565b612dfa81612df48454612d53565b84612d87565b602080601f831160018114612e2f5760008415612e175750858301515b600019600386901b1c1916600185901b178555611dee565b600085815260208120601f198616915b82811015612e5e57888601518255948401946001909101908401612e3f565b5085821015612e7c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000612e9f606083018661283b565b60208301949094525060400152919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612ed957612ed9612eb1565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612f0857600080fd5b5051919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252601a908201527f43616c6c6572206973206e6f74206120636f6e74726163746f72000000000000604082015260600190565b606081526000808554612fa681612d53565b8060608601526080600180841660008114612fc85760018114612fe257613013565b60ff1985168884015283151560051b880183019550613013565b8a60005260208060002060005b8681101561300a5781548b8201870152908401908201612fef565b8a018501975050505b505050505060208301949094525060400152919050565b60208082526031908201527f426f756e747920636f6d706c6574696f6e206973206e6f7420617070726f76656040820152703210313c903a34329032b6b83637bcb2b960791b606082015260800190565b6000821982111561308e5761308e612eb1565b500190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006131356040830185612b28565b82810360208401526131478185612b28565b95945050505050565b6000845161316281846020890161280b565b84519083019061317681836020890161280b565b845191019061318981836020880161280b565b0195945050505050565b600082516131a581846020870161280b565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906131e99083018461283b565b979650505050505050565b60006020828403121561320657600080fd5b815161269a816126e7565b600060033d111561322a5760046000803e5060005160e01c5b90565b600060443d101561323b5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561326a57505050505090565b82850191508151818111156132825750505050505090565b843d870101602082850101111561329c5750505050505090565b6132ab60208286010187612730565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061332a90830186612b28565b828103606084015261333c8186612b28565b90508281036080840152613350818561283b565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161339481601785016020880161280b565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133c581602884016020880161280b565b01602801949350505050565b60008160001904831182151516156133eb576133eb612eb1565b500290565b6000816133ff576133ff612eb1565b50600019019056feef28dcbf06eb73add8f77665c46a6263e719f928f9c34710ec1097573ba6e20cfc7c36207174f786648d2e624616a4b40e15fd7f0268b4e36af5057f0c43c83568747470733a2f2f697066732e696f2f69706e732f6b3531717a693575717535646969746272306b7977326a7574357a36643036686d39323374316d71617967756477347a663275316f636269703838696571a2646970667358221220144406e28e5a9e533849b05f029acbaa566101f27fa6fefa2602154d593625a364736f6c634300080f003368747470733a2f2f697066732e696f2f69706e732f6b3531717a693575717535646969746272306b7977326a7574357a36643036686d39323374316d71617967756477347a663275316f6362697038386965712f7b69647d2e6a736f6e608060405234801561001057600080fd5b5061001a33610028565b61002333610028565b610078565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109ab806100876000396000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b146101a457806398fc55d8146101c2578063bc197c81146101e2578063f23a6e6114610227578063f2fde38b14610253578063f3fef3a31461027357600080fd5b806301ffc9a7146100b75780633eb1fdc6146100ec5780633ffd91801461010157806357ef63cb14610139578063715018a61461016f5780637524e83c1461018457600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100d76100d2366004610651565b610286565b60405190151581526020015b60405180910390f35b6100ff6100fa36600461069e565b6102bd565b005b34801561010d57600080fd5b50600154610121906001600160a01b031681565b6040516001600160a01b0390911681526020016100e3565b34801561014557600080fd5b506101216101543660046106d1565b6002602052600090815260409020546001600160a01b031681565b34801561017b57600080fd5b506100ff610367565b34801561019057600080fd5b506100ff61019f3660046106ea565b61037b565b3480156101b057600080fd5b506000546001600160a01b0316610121565b3480156101ce57600080fd5b506100ff6101dd366004610705565b6103a5565b3480156101ee57600080fd5b5061020e6101fd366004610866565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100e3565b34801561023357600080fd5b5061020e610242366004610910565b63f23a6e6160e01b95945050505050565b34801561025f57600080fd5b506100ff61026e3660046106ea565b61043f565b6100ff610281366004610705565b6104b8565b60006001600160e01b03198216630271189760e51b14806102b757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600260205260409020546001600160a01b0384811691161461032b5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742077686974656c69737465642100000000000060448201526064015b60405180910390fd5b6040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610361573d6000803e3d6000fd5b50505050565b61036f6105a7565b6103796000610601565b565b6103836105a7565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146104115760405162461bcd60e51b815260206004820152602960248201527f43616c6c6572206973206e6f7420426f756e7479736361706520736d61727420604482015268636f6e74726163742160b81b6064820152608401610322565b600090815260026020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6104476105a7565b6001600160a01b0381166104ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610322565b6104b581610601565b50565b6000818152600260205260409020546001600160a01b038381169116146105215760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742077686974656c6973746564210000000000006044820152606401610322565b60018054604051637921219560e11b81523060048201526001600160a01b03858116602483015260448201859052606482019390935260a06084820152600060a482015291169063f242432a9060c401600060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610322565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561066357600080fd5b81356001600160e01b03198116811461067b57600080fd5b9392505050565b80356001600160a01b038116811461069957600080fd5b919050565b6000806000606084860312156106b357600080fd5b6106bc84610682565b95602085013595506040909401359392505050565b6000602082840312156106e357600080fd5b5035919050565b6000602082840312156106fc57600080fd5b61067b82610682565b6000806040838503121561071857600080fd5b61072183610682565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561076e5761076e61072f565b604052919050565b600082601f83011261078757600080fd5b8135602067ffffffffffffffff8211156107a3576107a361072f565b8160051b6107b2828201610745565b92835284810182019282810190878511156107cc57600080fd5b83870192505b848310156107eb578235825291830191908301906107d2565b979650505050505050565b600082601f83011261080757600080fd5b813567ffffffffffffffff8111156108215761082161072f565b610834601f8201601f1916602001610745565b81815284602083860101111561084957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561087e57600080fd5b61088786610682565b945061089560208701610682565b9350604086013567ffffffffffffffff808211156108b257600080fd5b6108be89838a01610776565b945060608801359150808211156108d457600080fd5b6108e089838a01610776565b935060808801359150808211156108f657600080fd5b50610903888289016107f6565b9150509295509295909350565b600080600080600060a0868803121561092857600080fd5b61093186610682565b945061093f60208701610682565b93506040860135925060608601359150608086013567ffffffffffffffff81111561096957600080fd5b610903888289016107f656fea2646970667358221220911e1e5acf81e38b591df06a8590cb2f7adf94c701449da97e40c03cee44b23664736f6c634300080f00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212203c2dad8ebb2d4b54cc1c08d46ecfa67e7b07f83de68e4f5b927680bcaa6e8e9a64736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct BountyscapeTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for BountyscapeTest<M> {
        fn clone(&self) -> Self {
            BountyscapeTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for BountyscapeTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for BountyscapeTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(BountyscapeTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> BountyscapeTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), BOUNTYSCAPETEST_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                BOUNTYSCAPETEST_ABI.clone(),
                BOUNTYSCAPETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testAnyoneCanListBounties` (0x336f28f6) function"]
        pub fn test_anyone_can_list_bounties(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([51, 111, 40, 246], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testAnyoneCanListBountiesAndGetStatus` (0x19692851) function"]
        pub fn test_anyone_can_list_bounties_and_get_status(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([25, 105, 40, 81], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCanClaimBounty` (0x1d2dba6b) function"]
        pub fn test_contractor_can_claim_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([29, 45, 186, 107], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCanClaimFunds` (0xf2874bc7) function"]
        pub fn test_contractor_can_claim_funds(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 135, 75, 199], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCanClaimFundsMultiple` (0x524b4463) function"]
        pub fn test_contractor_can_claim_funds_multiple(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([82, 75, 68, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testContractorCompleteBounty` (0x39a375ef) function"]
        pub fn test_contractor_complete_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([57, 163, 117, 239], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testEmployerCanApproveCompletedBounty` (0x908157b6) function"]
        pub fn test_employer_can_approve_completed_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([144, 129, 87, 182], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testEmployerCanCreateBounty` (0x2b0ebe9f) function"]
        pub fn test_employer_can_create_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([43, 14, 190, 159], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testEmployerCanCreatePrivateBounty` (0x1c617b13) function"]
        pub fn test_employer_can_create_private_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([28, 97, 123, 19], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailContractorCanClaimFundsNOCLAIM` (0x82ca165f) function"]
        pub fn test_fail_contractor_can_claim_funds_noclaim(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([130, 202, 22, 95], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailEmployerCanClaimBounty` (0x5698e22a) function"]
        pub fn test_fail_employer_can_claim_bounty(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([86, 152, 226, 42], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailEmployerCanCreateBountyNOVALUE` (0x40913fb9) function"]
        pub fn test_fail_employer_can_create_bounty_novalue(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([64, 145, 63, 185], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFailEmployerCanCreatePrivateBountyNOVALUE` (0x5734e614) function"]
        pub fn test_fail_employer_can_create_private_bounty_novalue(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([87, 52, 230, 20], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, BountyscapeTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for BountyscapeTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum BountyscapeTestEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for BountyscapeTestEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(BountyscapeTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for BountyscapeTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BountyscapeTestEvents::LogFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogAddressFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogArray1Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogArray2Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogArray3Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogBytesFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogBytes32Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogIntFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedArray3Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogStringFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogUintFilter(element) => element.fmt(f),
                BountyscapeTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testAnyoneCanListBounties` function with signature `testAnyoneCanListBounties()` and selector `[51, 111, 40, 246]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testAnyoneCanListBounties",
        abi = "testAnyoneCanListBounties()"
    )]
    pub struct TestAnyoneCanListBountiesCall;
    #[doc = "Container type for all input parameters for the `testAnyoneCanListBountiesAndGetStatus` function with signature `testAnyoneCanListBountiesAndGetStatus()` and selector `[25, 105, 40, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testAnyoneCanListBountiesAndGetStatus",
        abi = "testAnyoneCanListBountiesAndGetStatus()"
    )]
    pub struct TestAnyoneCanListBountiesAndGetStatusCall;
    #[doc = "Container type for all input parameters for the `testContractorCanClaimBounty` function with signature `testContractorCanClaimBounty()` and selector `[29, 45, 186, 107]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCanClaimBounty",
        abi = "testContractorCanClaimBounty()"
    )]
    pub struct TestContractorCanClaimBountyCall;
    #[doc = "Container type for all input parameters for the `testContractorCanClaimFunds` function with signature `testContractorCanClaimFunds()` and selector `[242, 135, 75, 199]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCanClaimFunds",
        abi = "testContractorCanClaimFunds()"
    )]
    pub struct TestContractorCanClaimFundsCall;
    #[doc = "Container type for all input parameters for the `testContractorCanClaimFundsMultiple` function with signature `testContractorCanClaimFundsMultiple()` and selector `[82, 75, 68, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCanClaimFundsMultiple",
        abi = "testContractorCanClaimFundsMultiple()"
    )]
    pub struct TestContractorCanClaimFundsMultipleCall;
    #[doc = "Container type for all input parameters for the `testContractorCompleteBounty` function with signature `testContractorCompleteBounty()` and selector `[57, 163, 117, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testContractorCompleteBounty",
        abi = "testContractorCompleteBounty()"
    )]
    pub struct TestContractorCompleteBountyCall;
    #[doc = "Container type for all input parameters for the `testEmployerCanApproveCompletedBounty` function with signature `testEmployerCanApproveCompletedBounty()` and selector `[144, 129, 87, 182]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testEmployerCanApproveCompletedBounty",
        abi = "testEmployerCanApproveCompletedBounty()"
    )]
    pub struct TestEmployerCanApproveCompletedBountyCall;
    #[doc = "Container type for all input parameters for the `testEmployerCanCreateBounty` function with signature `testEmployerCanCreateBounty()` and selector `[43, 14, 190, 159]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testEmployerCanCreateBounty",
        abi = "testEmployerCanCreateBounty()"
    )]
    pub struct TestEmployerCanCreateBountyCall;
    #[doc = "Container type for all input parameters for the `testEmployerCanCreatePrivateBounty` function with signature `testEmployerCanCreatePrivateBounty()` and selector `[28, 97, 123, 19]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testEmployerCanCreatePrivateBounty",
        abi = "testEmployerCanCreatePrivateBounty()"
    )]
    pub struct TestEmployerCanCreatePrivateBountyCall;
    #[doc = "Container type for all input parameters for the `testFailContractorCanClaimFundsNOCLAIM` function with signature `testFailContractorCanClaimFundsNOCLAIM()` and selector `[130, 202, 22, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFailContractorCanClaimFundsNOCLAIM",
        abi = "testFailContractorCanClaimFundsNOCLAIM()"
    )]
    pub struct TestFailContractorCanClaimFundsNOCLAIMCall;
    #[doc = "Container type for all input parameters for the `testFailEmployerCanClaimBounty` function with signature `testFailEmployerCanClaimBounty()` and selector `[86, 152, 226, 42]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFailEmployerCanClaimBounty",
        abi = "testFailEmployerCanClaimBounty()"
    )]
    pub struct TestFailEmployerCanClaimBountyCall;
    #[doc = "Container type for all input parameters for the `testFailEmployerCanCreateBountyNOVALUE` function with signature `testFailEmployerCanCreateBountyNOVALUE()` and selector `[64, 145, 63, 185]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFailEmployerCanCreateBountyNOVALUE",
        abi = "testFailEmployerCanCreateBountyNOVALUE()"
    )]
    pub struct TestFailEmployerCanCreateBountyNOVALUECall;
    #[doc = "Container type for all input parameters for the `testFailEmployerCanCreatePrivateBountyNOVALUE` function with signature `testFailEmployerCanCreatePrivateBountyNOVALUE()` and selector `[87, 52, 230, 20]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFailEmployerCanCreatePrivateBountyNOVALUE",
        abi = "testFailEmployerCanCreatePrivateBountyNOVALUE()"
    )]
    pub struct TestFailEmployerCanCreatePrivateBountyNOVALUECall;
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum BountyscapeTestCalls {
        IsScript(IsScriptCall),
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestAnyoneCanListBounties(TestAnyoneCanListBountiesCall),
        TestAnyoneCanListBountiesAndGetStatus(TestAnyoneCanListBountiesAndGetStatusCall),
        TestContractorCanClaimBounty(TestContractorCanClaimBountyCall),
        TestContractorCanClaimFunds(TestContractorCanClaimFundsCall),
        TestContractorCanClaimFundsMultiple(TestContractorCanClaimFundsMultipleCall),
        TestContractorCompleteBounty(TestContractorCompleteBountyCall),
        TestEmployerCanApproveCompletedBounty(TestEmployerCanApproveCompletedBountyCall),
        TestEmployerCanCreateBounty(TestEmployerCanCreateBountyCall),
        TestEmployerCanCreatePrivateBounty(TestEmployerCanCreatePrivateBountyCall),
        TestFailContractorCanClaimFundsNOCLAIM(TestFailContractorCanClaimFundsNOCLAIMCall),
        TestFailEmployerCanClaimBounty(TestFailEmployerCanClaimBountyCall),
        TestFailEmployerCanCreateBountyNOVALUE(TestFailEmployerCanCreateBountyNOVALUECall),
        TestFailEmployerCanCreatePrivateBountyNOVALUE(
            TestFailEmployerCanCreatePrivateBountyNOVALUECall,
        ),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for BountyscapeTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BountyscapeTestCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BountyscapeTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BountyscapeTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BountyscapeTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestAnyoneCanListBountiesCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestAnyoneCanListBounties(decoded));
            }
            if let Ok(decoded) =
                <TestAnyoneCanListBountiesAndGetStatusCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestAnyoneCanListBountiesAndGetStatus(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestContractorCanClaimBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestContractorCanClaimBounty(decoded));
            }
            if let Ok(decoded) =
                <TestContractorCanClaimFundsCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestContractorCanClaimFunds(decoded));
            }
            if let Ok(decoded) =
                <TestContractorCanClaimFundsMultipleCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestContractorCanClaimFundsMultiple(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestContractorCompleteBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestContractorCompleteBounty(decoded));
            }
            if let Ok(decoded) =
                <TestEmployerCanApproveCompletedBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestEmployerCanApproveCompletedBounty(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestEmployerCanCreateBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestEmployerCanCreateBounty(decoded));
            }
            if let Ok(decoded) =
                <TestEmployerCanCreatePrivateBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestEmployerCanCreatePrivateBounty(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestFailContractorCanClaimFundsNOCLAIMCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestFailContractorCanClaimFundsNOCLAIM(decoded));
            }
            if let Ok(decoded) =
                <TestFailEmployerCanClaimBountyCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestFailEmployerCanClaimBounty(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestFailEmployerCanCreateBountyNOVALUECall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(BountyscapeTestCalls::TestFailEmployerCanCreateBountyNOVALUE(decoded));
            }
            if let Ok (decoded) = < TestFailEmployerCanCreatePrivateBountyNOVALUECall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (BountyscapeTestCalls :: TestFailEmployerCanCreatePrivateBountyNOVALUE (decoded)) }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(BountyscapeTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for BountyscapeTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                BountyscapeTestCalls::IsScript(element) => element.encode(),
                BountyscapeTestCalls::IsTest(element) => element.encode(),
                BountyscapeTestCalls::Failed(element) => element.encode(),
                BountyscapeTestCalls::SetUp(element) => element.encode(),
                BountyscapeTestCalls::TestAnyoneCanListBounties(element) => element.encode(),
                BountyscapeTestCalls::TestAnyoneCanListBountiesAndGetStatus(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestContractorCanClaimBounty(element) => element.encode(),
                BountyscapeTestCalls::TestContractorCanClaimFunds(element) => element.encode(),
                BountyscapeTestCalls::TestContractorCanClaimFundsMultiple(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestContractorCompleteBounty(element) => element.encode(),
                BountyscapeTestCalls::TestEmployerCanApproveCompletedBounty(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestEmployerCanCreateBounty(element) => element.encode(),
                BountyscapeTestCalls::TestEmployerCanCreatePrivateBounty(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestFailContractorCanClaimFundsNOCLAIM(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestFailEmployerCanClaimBounty(element) => element.encode(),
                BountyscapeTestCalls::TestFailEmployerCanCreateBountyNOVALUE(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::TestFailEmployerCanCreatePrivateBountyNOVALUE(element) => {
                    element.encode()
                }
                BountyscapeTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for BountyscapeTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BountyscapeTestCalls::IsScript(element) => element.fmt(f),
                BountyscapeTestCalls::IsTest(element) => element.fmt(f),
                BountyscapeTestCalls::Failed(element) => element.fmt(f),
                BountyscapeTestCalls::SetUp(element) => element.fmt(f),
                BountyscapeTestCalls::TestAnyoneCanListBounties(element) => element.fmt(f),
                BountyscapeTestCalls::TestAnyoneCanListBountiesAndGetStatus(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestContractorCanClaimBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestContractorCanClaimFunds(element) => element.fmt(f),
                BountyscapeTestCalls::TestContractorCanClaimFundsMultiple(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestContractorCompleteBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestEmployerCanApproveCompletedBounty(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestEmployerCanCreateBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestEmployerCanCreatePrivateBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestFailContractorCanClaimFundsNOCLAIM(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestFailEmployerCanClaimBounty(element) => element.fmt(f),
                BountyscapeTestCalls::TestFailEmployerCanCreateBountyNOVALUE(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::TestFailEmployerCanCreatePrivateBountyNOVALUE(element) => {
                    element.fmt(f)
                }
                BountyscapeTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsScriptCall> for BountyscapeTestCalls {
        fn from(var: IsScriptCall) -> Self {
            BountyscapeTestCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<IsTestCall> for BountyscapeTestCalls {
        fn from(var: IsTestCall) -> Self {
            BountyscapeTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for BountyscapeTestCalls {
        fn from(var: FailedCall) -> Self {
            BountyscapeTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for BountyscapeTestCalls {
        fn from(var: SetUpCall) -> Self {
            BountyscapeTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestAnyoneCanListBountiesCall> for BountyscapeTestCalls {
        fn from(var: TestAnyoneCanListBountiesCall) -> Self {
            BountyscapeTestCalls::TestAnyoneCanListBounties(var)
        }
    }
    impl ::std::convert::From<TestAnyoneCanListBountiesAndGetStatusCall> for BountyscapeTestCalls {
        fn from(var: TestAnyoneCanListBountiesAndGetStatusCall) -> Self {
            BountyscapeTestCalls::TestAnyoneCanListBountiesAndGetStatus(var)
        }
    }
    impl ::std::convert::From<TestContractorCanClaimBountyCall> for BountyscapeTestCalls {
        fn from(var: TestContractorCanClaimBountyCall) -> Self {
            BountyscapeTestCalls::TestContractorCanClaimBounty(var)
        }
    }
    impl ::std::convert::From<TestContractorCanClaimFundsCall> for BountyscapeTestCalls {
        fn from(var: TestContractorCanClaimFundsCall) -> Self {
            BountyscapeTestCalls::TestContractorCanClaimFunds(var)
        }
    }
    impl ::std::convert::From<TestContractorCanClaimFundsMultipleCall> for BountyscapeTestCalls {
        fn from(var: TestContractorCanClaimFundsMultipleCall) -> Self {
            BountyscapeTestCalls::TestContractorCanClaimFundsMultiple(var)
        }
    }
    impl ::std::convert::From<TestContractorCompleteBountyCall> for BountyscapeTestCalls {
        fn from(var: TestContractorCompleteBountyCall) -> Self {
            BountyscapeTestCalls::TestContractorCompleteBounty(var)
        }
    }
    impl ::std::convert::From<TestEmployerCanApproveCompletedBountyCall> for BountyscapeTestCalls {
        fn from(var: TestEmployerCanApproveCompletedBountyCall) -> Self {
            BountyscapeTestCalls::TestEmployerCanApproveCompletedBounty(var)
        }
    }
    impl ::std::convert::From<TestEmployerCanCreateBountyCall> for BountyscapeTestCalls {
        fn from(var: TestEmployerCanCreateBountyCall) -> Self {
            BountyscapeTestCalls::TestEmployerCanCreateBounty(var)
        }
    }
    impl ::std::convert::From<TestEmployerCanCreatePrivateBountyCall> for BountyscapeTestCalls {
        fn from(var: TestEmployerCanCreatePrivateBountyCall) -> Self {
            BountyscapeTestCalls::TestEmployerCanCreatePrivateBounty(var)
        }
    }
    impl ::std::convert::From<TestFailContractorCanClaimFundsNOCLAIMCall> for BountyscapeTestCalls {
        fn from(var: TestFailContractorCanClaimFundsNOCLAIMCall) -> Self {
            BountyscapeTestCalls::TestFailContractorCanClaimFundsNOCLAIM(var)
        }
    }
    impl ::std::convert::From<TestFailEmployerCanClaimBountyCall> for BountyscapeTestCalls {
        fn from(var: TestFailEmployerCanClaimBountyCall) -> Self {
            BountyscapeTestCalls::TestFailEmployerCanClaimBounty(var)
        }
    }
    impl ::std::convert::From<TestFailEmployerCanCreateBountyNOVALUECall> for BountyscapeTestCalls {
        fn from(var: TestFailEmployerCanCreateBountyNOVALUECall) -> Self {
            BountyscapeTestCalls::TestFailEmployerCanCreateBountyNOVALUE(var)
        }
    }
    impl ::std::convert::From<TestFailEmployerCanCreatePrivateBountyNOVALUECall>
        for BountyscapeTestCalls
    {
        fn from(var: TestFailEmployerCanCreatePrivateBountyNOVALUECall) -> Self {
            BountyscapeTestCalls::TestFailEmployerCanCreatePrivateBountyNOVALUE(var)
        }
    }
    impl ::std::convert::From<VmCall> for BountyscapeTestCalls {
        fn from(var: VmCall) -> Self {
            BountyscapeTestCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
